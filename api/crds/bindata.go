// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashelasticsearches.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashelasticsearchesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x8f\xdc\x34\x10\xfe\xbe\xbf\x62\x24\x90\x0a\x88\x64\x39\x55\x42\x90\x2f\x08\x1d\x45\xaa\x28\x2f\xea\x96\x7e\x39\x15\x69\xd6\x9e\xcd\x0e\xe7\xd8\xc6\x33\x09\xbd\xfb\xf5\xc8\x4e\xb2\xb7\xaf\x47\xaf\x02\x7f\x8a\x1f\xcf\x9b\x9f\x67\xc6\x0a\x46\x7e\x4b\x49\x38\xf8\x06\x30\x32\xbd\x57\xf2\x79\x27\xf5\xed\x37\x52\x73\x58\x0e\x57\x6b\x52\xbc\x5a\xdc\xb2\xb7\x0d\x5c\xf7\xa2\xa1\x7b\x4d\x12\xfa\x64\xe8\x07\xda\xb0\x67\xe5\xe0\x17\x1d\x29\x5a\x54\x6c\x16\x00\x26\x11\x66\xf0\x0d\x77\x24\x8a\x5d\x6c\xc0\xf7\xce\x2d\x00\x1c\xae\xc9\x49\xb6\x01\xc0\x18\x1b\x10\x45\xd9\x2e\x00\x3c\x76\x34\xed\xc8\xa1\x28\x1b\x21\x4c\x66\x4b\x52\xb3\x17\x45\xe7\x28\xd5\xe5\xb8\xc6\x18\xc5\x04\x4b\xb5\x09\xdd\x42\x22\x99\x1c\xae\x4d\xa1\x8f\x0d\x3c\x6a\x3b\x66\x99\xb2\x1b\x54\x6a\x43\xe2\x79\x5f\xed\x4a\xc9\xdf\xb3\x5f\xd9\x8e\x37\x5f\xe5\xe3\x17\xfb\xb5\x95\x43\xc7\xa2\x3f\x5d\x30\x78\xc5\xa2\xc5\x28\xba\x3e\xa1\x3b\x7f\xbf\x62\x20\xec\xdb\xde\x61\x3a\x67\xb2\x00\x88\x89\x84\xd2\x40\xbf\xfb\x5b\x1f\xfe\xf6\x3f\x32\x39\x2b\x0d\x6c\xd0\x49\x2e\x51\x4c\x88\xd4\xc0\x2f\xf9\x76\x11\x0d\xd9\x05\xc0\x80\x8e\x6d\x51\x61\xbc\x5f\x88\xe4\xbf\xff\xed\xe5\xdb\xe7\x2b\xb3\xa5\x0e\x47\x30\x47\x0e\x91\x92\xee\x68\x18\x85\xd9\xb5\xc4\x0e\x03\xb0\x24\x26\x71\x2c\x11\xe1\x59\x0e\x35\xda\x80\xcd\x4d\x40\x02\xba\x25\x18\x46\x8c\x2c\x48\x49\x03\x61\x03\xba\x65\x81\x44\xe5\x0e\x5e\x4b\x49\x7b\x61\x21\x9b\xa0\x87\xb0\xfe\x93\x8c\xd6\xb0\xca\xf7\x4c\x02\xb2\x0d\xbd\xb3\x60\x82\x1f\x28\x29\x24\x32\xa1\xf5\x7c\xbf\x8b\x2c\xa0\xa1\xa4\x74\xa8\x34\xd1\x3c\x2f\xf6\x4a\xc9\xa3\xcb\x24\xf4\xf4\x25\xa0\xb7\xd0\xe1\x1d\x24\xca\x39\xa0\xf7\x7b\xd1\x8a\x89\xd4\xf0\x73\x48\x04\xec\x37\xa1\x81\xad\x6a\x94\x66\xb9\x6c\x59\xe7\x21\x30\xa1\xeb\x7a\xcf\x7a\xb7\x34\xc1\x6b\xe2\x75\xaf\x21\xc9\xd2\xd2\x40\x6e\x29\xdc\x56\x59\x28\x56\x32\xda\x27\x5a\x62\xe4\xaa\x14\xee\xb5\x4c\x52\x67\x3f\x49\xd3\xc4\xc8\xb3\xbd\x4a\xf5\x2e\x96\xa6\x4f\xec\xdb\x1d\x5c\xba\xed\x22\xef\xb9\xd5\x80\x05\x70\x72\x1b\xeb\x7f\xa0\x37\x43\x99\x95\xd7\x2f\x56\x6f\x60\x4e\x5a\x24\x38\xe4\xbc\xb0\xfd\xe0\x26\x0f\xc4\x67\xa2\xd8\x6f\x28\x8d\xc2\x6d\x52\xe8\x4a\x44\xf2\x36\x06\xf6\x5a\x36\xc6\x31\xf9\x43\xd2\xa5\x5f\x77\xac\x59\xe9\xbf\x7a\x12\xcd\xfa\xd4\x70\x8d\xde\x07\x85\x35\x41\x1f\x2d\x2a\xd9\x1a\x5e\x7a\xb8\xc6\x8e\xdc\x35\x0a\xfd\xef\xb4\x67\x86\xa5\xca\x94\xfe\x3b\xf1\xfb\x2f\xd8\xbc\xce\x8d\x47\x5e\xe5\xb9\x3a\x40\x00\x3a\x7c\xff\x8a\x7c\xab\xdb\x06\xbe\x7e\x7e\x74\x16\x51\x73\x4b\x36\xf0\xc7\x0d\x56\xf7\xef\x3e\xbb\xa9\xb0\xba\xff\xaa\xfa\xf6\xdd\x17\x37\xd3\xc7\xe7\xdf\x7d\x7a\xe4\x73\xb6\xc8\x19\x1e\x05\xdc\xc1\xf3\x33\x78\xb6\x69\x4e\x1f\xa6\x55\x24\x93\xbb\x28\x4b\x39\x0d\xea\x26\xa4\xd1\x10\x4e\xdf\xb8\x79\x8d\xb3\x02\x1b\x76\xf4\x01\x1c\xad\xd1\xdc\xf6\xf1\x98\xa5\x4b\xd6\x79\x61\x6a\xcf\xa0\x17\x99\xb8\xc8\x46\x5e\x9b\xde\xb9\xac\xd2\xaf\x03\xa5\xc4\xf6\x44\xad\x8b\x31\xb9\xc3\xf6\xc4\xfa\xb1\xaa\x13\xb5\x2c\x9a\xee\x9e\x58\x79\x76\x8c\x41\x58\xc3\x47\xb8\x2a\xb6\x4f\xf4\xc9\x63\xc9\x89\xec\xb1\x5b\xb5\xab\xff\xcc\xc1\x5c\xdf\xc9\x91\xe2\x07\x0b\xf1\x51\x22\x24\x12\x0d\xe9\x49\x32\xfc\x77\xcd\x73\x8e\xaa\x6a\x6a\xe7\x03\xa8\xb4\xca\x01\x32\xd5\xfd\xf8\xb8\x1e\x41\xc3\xfc\xfb\x35\x5c\xa1\x8b\x5b\xbc\x7a\xc0\xca\x85\xaa\xe9\xe7\x68\xef\x18\xa0\xfc\x0e\xd8\x06\x34\xf5\x63\xb6\x9c\x37\x37\xee\x88\xfc\x13\x00\x00\xff\xff\x3c\x51\xbd\x9e\xd6\x09\x00\x00")

func installerStashAppscodeCom_stashelasticsearchesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashelasticsearchesYaml,
		"installer.stash.appscode.com_stashelasticsearches.yaml",
	)
}

func installerStashAppscodeCom_stashelasticsearchesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashelasticsearchesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashelasticsearches.yaml", size: 2518, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashelasticsearches.yaml": installerStashAppscodeCom_stashelasticsearchesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashelasticsearches.yaml": &bintree{installerStashAppscodeCom_stashelasticsearchesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
