// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashelasticsearches.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashelasticsearchesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x8e\xe4\x34\x10\x7d\xef\xaf\x28\x09\xa4\x05\x44\xd2\x8c\x56\x42\x90\x17\x84\x86\x45\x5a\xb1\x5c\xb4\xbd\xec\xcb\x68\x91\xaa\xed\xea\x74\x31\x8e\x6d\x5c\x95\x66\x67\xbe\x1e\xd9\x49\x7a\xfa\x92\x1e\xd8\x11\x08\x3f\xc5\xc7\xe5\xba\x9c\x53\x65\x05\x23\xbf\xa5\x24\x1c\x7c\x03\x18\x99\xde\x2b\xf9\xbc\x93\xfa\xf6\x2b\xa9\x39\x2c\x77\x57\x6b\x52\xbc\x5a\xdc\xb2\xb7\x0d\x5c\xf7\xa2\xa1\x7b\x4d\x12\xfa\x64\xe8\x3b\xda\xb0\x67\xe5\xe0\x17\x1d\x29\x5a\x54\x6c\x16\x00\x26\x11\x66\xf0\x0d\x77\x24\x8a\x5d\x6c\xc0\xf7\xce\x2d\x00\x1c\xae\xc9\x49\xb6\x01\xc0\x18\x1b\x10\x45\xd9\x2e\x00\x3c\x76\x34\xee\xc8\xa1\x28\x1b\x21\x4c\x66\x4b\x52\xb3\x17\x45\xe7\x28\xd5\xe5\xb8\xc6\x18\xc5\x04\x4b\xb5\x09\xdd\x42\x22\x99\xec\xae\x4d\xa1\x8f\x0d\x3c\x6a\x3b\x44\x19\xa3\x1b\x54\x6a\x43\xe2\x69\x5f\xed\x53\xc9\xdf\xd3\xbd\xb2\x1d\x2a\x5f\xe5\xe3\x17\x87\xb9\x95\x43\xc7\xa2\x3f\x5c\x30\x78\xc5\xa2\xc5\x28\xba\x3e\xa1\x9b\xaf\xaf\x18\x08\xfb\xb6\x77\x98\xe6\x4c\x16\x00\x31\x91\x50\xda\xd1\xaf\xfe\xd6\x87\x3f\xfd\xf7\x4c\xce\x4a\x03\x1b\x74\x92\x53\x14\x13\x22\x35\xf0\x53\xae\x2e\xa2\x21\xbb\x00\xd8\xa1\x63\x5b\x54\x18\xea\x0b\x91\xfc\xb7\xbf\xbc\x7c\xfb\x7c\x65\xb6\xd4\xe1\x00\x66\xcf\x21\x52\xd2\x3d\x0d\x83\x30\xfb\x96\xd8\x63\x00\x96\xc4\x24\x8e\xc5\x23\x3c\xcb\xae\x06\x1b\xb0\xb9\x09\x48\x40\xb7\x04\xbb\x01\x23\x0b\x52\xc2\x40\xd8\x80\x6e\x59\x20\x51\xa9\xc1\x6b\x49\xe9\xc0\x2d\x64\x13\xf4\x10\xd6\xbf\x93\xd1\x1a\x56\xb9\xce\x24\x20\xdb\xd0\x3b\x0b\x26\xf8\x1d\x25\x85\x44\x26\xb4\x9e\xef\xf7\x9e\x05\x34\x94\x90\x0e\x95\x46\x9a\xa7\xc5\x5e\x29\x79\x74\x99\x84\x9e\x3e\x07\xf4\x16\x3a\xbc\x83\x44\x39\x06\xf4\xfe\xc0\x5b\x31\x91\x1a\x7e\x0c\x89\x80\xfd\x26\x34\xb0\x55\x8d\xd2\x2c\x97\x2d\xeb\x34\x04\x26\x74\x5d\xef\x59\xef\x96\x26\x78\x4d\xbc\xee\x35\x24\x59\x5a\xda\x91\x5b\x0a\xb7\x55\x16\x8a\x95\x8c\xf6\x89\x96\x18\xb9\x2a\x89\x7b\x2d\x93\xd4\xd9\x8f\xd2\x38\x31\xf2\xec\x20\x53\xbd\x8b\xa5\xe9\x13\xfb\x76\x0f\x97\x6e\xbb\xc8\x7b\x6e\x35\x60\x01\x1c\xaf\x0d\xf9\x3f\xd0\x9b\xa1\xcc\xca\xeb\x17\xab\x37\x30\x05\x2d\x12\x1c\x73\x5e\xd8\x7e\xb8\x26\x0f\xc4\x67\xa2\xd8\x6f\x28\x0d\xc2\x6d\x52\xe8\x8a\x47\xf2\x36\x06\xf6\x5a\x36\xc6\x31\xf9\x63\xd2\xa5\x5f\x77\xac\x59\xe9\x3f\x7a\x12\xcd\xfa\xd4\x70\x8d\xde\x07\x85\x35\x41\x1f\x2d\x2a\xd9\x1a\x5e\x7a\xb8\xc6\x8e\xdc\x35\x0a\xfd\xe7\xb4\x67\x86\xa5\xca\x94\xfe\x3d\xf1\x87\x2f\xd8\xb4\xe6\xc6\x23\xaf\xf2\x5c\x1d\x21\x00\x1d\xbe\x7f\x45\xbe\xd5\x6d\x03\x5f\x3e\x3f\x39\x8b\xa8\xb9\x25\x1b\xf8\xed\x06\xab\xfb\x77\x9f\xdc\x54\x58\xdd\x7f\x51\x7d\xfd\xee\xb3\x9b\xf1\xe3\xd3\x6f\x3e\x3e\xb9\x33\x9b\xe4\x04\x0f\x02\xee\xe1\xe9\x19\x9c\x6d\x9a\xf3\x87\x69\x15\xc9\xe4\x2e\xca\x52\x8e\x83\xba\x09\x69\x30\x84\xf3\x37\x6e\x5a\xc3\xac\xc0\x86\x1d\xfd\x03\x8e\xd6\x68\x6e\xfb\x78\xca\xd2\x25\xeb\xbc\x30\xb5\x33\xe8\x45\x26\xf2\xca\xdd\xc6\x89\xec\xe9\xb5\xaa\x38\x9b\x65\xf4\x84\xba\xbc\x36\xbd\x73\x59\xd2\x9f\x77\x94\x12\xdb\x33\x69\x2f\x26\xc0\x1d\xb6\x67\xd6\x8f\x95\x98\xa8\x65\xd1\x74\xf7\x81\x65\xe6\x8b\x31\x08\x6b\x78\xc2\x55\xc5\xf6\x5f\x63\x75\xca\x7f\xe6\x60\xca\xef\xec\x48\xf1\xd4\xff\x45\x21\x9e\x24\x42\x22\xd1\x90\x3e\x48\x86\xff\xa9\xd3\xe6\x7c\x54\xe3\xa0\x1c\x41\xa5\xaf\x8e\x90\xb1\xc8\xc7\x1f\x82\x13\x68\x37\xfd\xd8\xed\xae\xd0\xc5\x2d\x5e\x3d\x60\xa5\xfa\x6a\xfc\xed\x3a\x38\x06\x28\x3f\x1a\xb6\x01\x4d\xfd\x10\x2d\xc7\xcd\x5d\x3e\x20\x7f\x05\x00\x00\xff\xff\x89\xb1\xd5\xc4\x30\x0a\x00\x00")

func installerStashAppscodeCom_stashelasticsearchesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashelasticsearchesYaml,
		"installer.stash.appscode.com_stashelasticsearches.yaml",
	)
}

func installerStashAppscodeCom_stashelasticsearchesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashelasticsearchesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashelasticsearches.yaml", size: 2608, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashelasticsearches.yaml": installerStashAppscodeCom_stashelasticsearchesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashelasticsearches.yaml": &bintree{installerStashAppscodeCom_stashelasticsearchesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
