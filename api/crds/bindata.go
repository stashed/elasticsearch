// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashelasticsearches.v1.yaml
// installer.stash.appscode.com_stashelasticsearches.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashelasticsearchesV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x8f\xe3\x36\x0c\xbe\xfb\x57\x10\xe8\x61\x2f\x8d\x83\x45\x8b\xa2\xf0\xad\x98\xee\x61\xd1\x27\x36\x8b\xbd\x33\x32\xed\xb0\x23\x4b\x2a\x49\xa5\x9d\xfe\xfa\x42\xb2\x33\x79\x4e\xda\x1d\xb4\x3a\x45\x7c\x89\xfc\x3e\x92\x31\x26\xfe\x44\xa2\x1c\x43\x07\x98\x98\xfe\x34\x0a\xe5\xa6\xed\xe3\xb7\xda\x72\x5c\xef\xdf\x36\x8f\x1c\xfa\x0e\x1e\xb2\x5a\x9c\x3e\x90\xc6\x2c\x8e\xbe\xa7\x81\x03\x1b\xc7\xd0\x4c\x64\xd8\xa3\x61\xd7\x00\x38\x21\x2c\xc2\x8f\x3c\x91\x1a\x4e\xa9\x83\x90\xbd\x6f\x00\x3c\x6e\xc9\x6b\xb1\x01\xc0\x94\x3a\x50\x43\xdd\x35\x00\x01\x27\x5a\x6e\xe4\x51\x8d\x9d\x12\x8a\xdb\x91\xb6\x1c\xd4\xd0\x7b\x92\xb6\xaa\x5b\x4c\x49\x5d\xec\xa9\x75\x71\x6a\x34\x91\x2b\xe1\x46\x89\x39\x75\x70\xd7\x76\x7e\x65\x79\xdd\xa1\xd1\x18\x85\x0f\xf7\xd5\x73\x2a\xe5\xf7\xc1\xaf\x5e\xe7\xca\x37\x45\xfd\xee\x34\xb7\xaa\xf4\xac\xf6\xc3\x0b\x06\x3f\xb2\x5a\x35\x4a\x3e\x0b\xfa\xdb\xf5\x55\x03\xe5\x30\x66\x8f\x72\xcb\xa4\x01\x50\x17\x13\x75\xf0\x73\x49\x3f\xa1\xa3\xbe\x01\xd8\xcf\x84\xd5\xf4\x57\x0b\x7e\xfb\xb7\xe8\xd3\x0e\xdf\xce\x31\xdd\x8e\x26\x9c\xab\x03\x88\x89\xc2\x77\xbf\xbe\xff\xf4\xd5\xe6\x4c\x0c\x90\x24\x26\x12\x7b\x06\x62\x3e\x27\x1d\x71\x22\x05\xe8\x49\x9d\x70\xb2\xda\x2a\x6f\x4a\xc0\xd9\x0a\xfa\xd2\x0a\xa4\x60\x3b\x3a\xa4\x46\xfd\x92\x03\xc4\x01\x6c\xc7\x0a\x42\x49\x48\x29\x58\x6d\x8f\xb3\xc0\x50\x8c\x30\x40\xdc\xfe\x46\xce\x5a\xd8\x90\x94\x30\xa0\xbb\x98\x7d\x0f\x2e\x86\x3d\x89\x81\x90\x8b\x63\xe0\xbf\x9e\x63\x2b\x58\xac\x8f\x7a\x34\x5a\xe0\x3e\x1e\x0e\x46\x12\xd0\xc3\x1e\x7d\xa6\x2f\x01\x43\x0f\x13\x3e\x81\x50\x79\x05\x72\x38\x89\x57\x4d\xb4\x85\x9f\xa2\x10\x70\x18\x62\x07\x3b\xb3\xa4\xdd\x7a\x3d\xb2\x1d\x26\xc1\xc5\x69\xca\x81\xed\x69\xed\x62\x30\xe1\x6d\xb6\x28\xba\xee\x69\x4f\x7e\xad\x3c\xae\x0a\x65\x6c\xe4\x2c\x0b\xad\x31\xf1\xaa\xa6\x1e\xac\x8e\xd3\xd4\x7f\x21\xcb\xec\xe8\x9b\xb3\x5c\xed\x29\xd5\x01\x10\x0e\xe3\x89\xa2\xf6\xde\x1d\x06\x4a\xeb\x01\x2b\xe0\xe2\x3a\x57\x71\x04\xba\x88\x0a\x3a\x1f\xde\x6d\x3e\xc2\xe1\xe9\x4a\xc6\x25\xfa\x15\xf7\xa3\xa3\x1e\x29\x28\x80\x71\x18\x48\x66\x12\x07\x89\x53\x8d\x49\xa1\x4f\x91\x83\xd5\x8b\xf3\x4c\xe1\x12\x7e\xcd\xdb\x89\xad\xf0\xfe\x7b\x26\xb5\xc2\x55\x0b\x0f\x18\x42\x34\xd8\x12\xe4\xd4\xa3\x51\xdf\xc2\xfb\x00\x0f\x38\x91\x7f\x40\xa5\xff\x9d\x80\x82\xb4\xae\x0a\xb0\xff\x8e\x82\xd3\xcd\x76\x69\x3c\xa3\x76\xa2\x38\xec\xa3\x17\xf8\xba\xde\x11\x9b\x44\xae\x10\x58\x30\x5c\xa6\x65\x88\x32\x1b\xc2\xf5\xba\x39\x9e\xb9\x5d\x61\x60\x4f\x67\x9a\xdb\xf3\x5c\xce\x16\xdd\x63\x4e\x97\xd2\x7b\x1e\xe5\xa0\x8c\x37\xe5\x2f\xe2\x75\x17\x9f\x72\x86\xec\x7d\xd9\x57\xbf\xec\x49\x84\x7b\xba\x8e\x7e\x27\x32\x4f\x38\xde\xf0\xb8\x5f\x83\xd0\xc8\x6a\xf2\xf4\x8a\x3a\x8a\x73\x8a\xca\x16\x5f\xe9\x6e\x38\xbe\xc2\xaf\x4c\x0c\x0b\xf5\xd7\xae\xab\xe7\x6a\x6e\xaa\x0e\xb9\xde\x50\x1a\x7e\x16\x4d\xaf\xa6\x48\x48\x2d\xca\x67\x93\xf4\xdf\x37\xda\x1f\xc8\x56\xbe\x41\x62\xb6\xeb\xc0\x43\x94\x09\xad\x7c\x32\xd8\x37\x5f\xbf\x10\xb5\xfc\x7d\x8c\x24\xcd\x79\x75\xb7\x98\x59\x2d\xd3\x75\x21\xac\xdd\x7a\x21\x5b\xe0\xb9\x90\x9e\xe4\xfa\xcf\x7b\xe6\x4a\xa8\x65\x55\xf7\x1d\x98\xe4\x39\x70\x79\xa2\x0c\xca\x2c\xf9\x3b\x00\x00\xff\xff\x6c\x5b\xd5\x58\xe0\x09\x00\x00")

func installerStashAppscodeCom_stashelasticsearchesV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashelasticsearchesV1Yaml,
		"installer.stash.appscode.com_stashelasticsearches.v1.yaml",
	)
}

func installerStashAppscodeCom_stashelasticsearchesV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashelasticsearchesV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashelasticsearches.v1.yaml", size: 2528, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashelasticsearchesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x8f\x1c\x35\x0c\x7e\xdf\xbf\xc2\x12\x48\x05\xc4\xec\x72\x2a\xaa\x60\x5e\x10\x3a\x8a\x54\x51\x7e\xa8\x57\xfa\x72\x2a\x92\x37\xe3\x9d\x35\x97\x49\x82\xed\xd9\xf6\xee\xaf\x47\xc9\xcc\xec\xed\xcf\xa3\x57\xd1\x3c\x4d\xbe\xd8\xce\x97\xcf\x76\x26\x98\xf8\x0d\x89\x72\x0c\x35\x60\x62\x7a\x6f\x14\xf2\x4c\xe7\x37\xdf\xe9\x9c\xe3\x62\x73\xb1\x24\xc3\x8b\xd9\x0d\x87\xa6\x86\xcb\x5e\x2d\x76\xaf\x48\x63\x2f\x8e\x7e\xa2\x15\x07\x36\x8e\x61\xd6\x91\x61\x83\x86\xf5\x0c\xc0\x09\x61\x06\x5f\x73\x47\x6a\xd8\xa5\x1a\x42\xef\xfd\x0c\xc0\xe3\x92\xbc\x66\x1b\x00\x4c\xa9\x06\x35\xd4\xf5\x0c\x20\x60\x47\xe3\x8c\x3c\xaa\xb1\x53\x42\x71\x6b\xd2\x39\x07\x35\xf4\x9e\x64\x5e\x96\xe7\x98\x92\xba\xd8\xd0\xdc\xc5\x6e\xa6\x89\x5c\x0e\xd7\x4a\xec\x53\x0d\x0f\xda\x0e\xbb\x8c\xbb\x3b\x34\x6a\xa3\xf0\x34\xaf\xb6\x54\xf2\xf7\xe4\x57\xa6\xc3\xc9\xaf\xf2\xf2\xf3\x5d\x6e\x65\xd1\xb3\xda\x2f\x67\x0c\x5e\xb2\x5a\x31\x4a\xbe\x17\xf4\xa7\xcf\x57\x0c\x94\x43\xdb\x7b\x94\x53\x26\x33\x80\x24\xa4\x24\x1b\xfa\x33\xdc\x84\xf8\x2e\xfc\xcc\xe4\x1b\xad\x61\x85\x5e\x33\x45\x75\x31\x51\x0d\xbf\xe5\xd3\x25\x74\xd4\xcc\x00\x36\xe8\xb9\x29\x59\x18\xce\x17\x13\x85\x1f\xff\x78\xf1\xe6\xe9\x95\x5b\x53\x87\x03\x98\x23\xc7\x44\x62\x5b\x19\x86\xc4\x6c\x4b\x62\x8b\x01\x34\xa4\x4e\x38\x95\x88\xf0\x24\x87\x1a\x6c\xa0\xc9\x45\x40\x0a\xb6\x26\xd8\x0c\x18\x35\xa0\x65\x1b\x88\x2b\xb0\x35\x2b\x08\x95\x33\x04\x2b\x94\x76\xc2\x42\x36\xc1\x00\x71\xf9\x37\x39\x9b\xc3\x55\x3e\xa7\x28\xe8\x3a\xf6\xbe\x01\x17\xc3\x86\xc4\x40\xc8\xc5\x36\xf0\xdd\x36\xb2\x82\xc5\xb2\xa5\x47\xa3\x51\xe6\x69\x70\x30\x92\x80\x3e\x8b\xd0\xd3\xd7\x80\xa1\x81\x0e\x6f\x41\x28\xef\x01\x7d\xd8\x89\x56\x4c\x74\x0e\xbf\x46\x21\xe0\xb0\x8a\x35\xac\xcd\x92\xd6\x8b\x45\xcb\x36\x35\x81\x8b\x5d\xd7\x07\xb6\xdb\x85\x8b\xc1\x84\x97\xbd\x45\xd1\x45\x43\x1b\xf2\x0b\xe5\xb6\xca\x89\x62\x23\x67\xbd\xd0\x02\x13\x57\x85\x78\xb0\xd2\x49\x5d\xf3\x99\x8c\x1d\xa3\x4f\x76\x98\xda\x6d\x2a\x45\x2f\x1c\xda\x2d\x5c\xaa\xed\xac\xee\xb9\xd4\x80\x15\x70\x74\x1b\xf8\xdf\xcb\x9b\xa1\xac\xca\xab\xe7\x57\xaf\x61\xda\xb4\xa4\x60\x5f\xf3\xa2\xf6\xbd\x9b\xde\x0b\x9f\x85\xe2\xb0\x22\x19\x12\xb7\x92\xd8\x95\x88\x14\x9a\x14\x39\x58\x99\x38\xcf\x14\xf6\x45\xd7\x7e\xd9\xb1\xe5\x4c\xff\xd3\x93\x5a\xce\xcf\x1c\x2e\x31\x84\x68\xb0\x24\xe8\x53\x83\x46\xcd\x1c\x5e\x04\xb8\xc4\x8e\xfc\x25\x2a\x7d\x72\xd9\xb3\xc2\x5a\x65\x49\xff\x5b\xf8\xdd\x1b\x6c\x1a\xa7\xda\x23\x8f\x72\x5d\xed\x21\x00\x1d\xbe\x7f\x49\xa1\xb5\x75\x0d\xcf\x9e\x1e\xac\x25\xb4\x5c\x92\x35\xfc\x75\x8d\xd5\xdd\xdb\x2f\xae\x2b\xac\xee\xbe\xa9\xbe\x7f\xfb\xd5\xf5\xf8\xf1\xe5\x0f\x9f\x1f\xf8\x9c\x24\x39\xc1\x43\x02\xb7\xf0\x74\x0d\x9e\x2c\x9a\xe3\x8b\xe9\x2a\x91\xcb\x55\x94\x53\x39\x36\xea\x2a\xca\x60\x08\xc7\x77\xdc\x34\x86\x5e\x81\x15\x7b\xfa\x00\x8d\x96\xe8\x6e\xfa\x74\xa8\xd2\x39\xeb\x3c\x50\xda\x13\xe8\x59\x25\xce\xaa\x91\xc7\xaa\xf7\x3e\x67\xe9\xf7\x0d\x89\x70\x73\x94\xad\xb3\x31\xb9\xc3\xf6\xc8\xfa\x21\xd6\x42\x2d\xab\xc9\xed\x23\x99\x67\xc7\x14\x95\x2d\x7e\x84\xab\x61\xfb\x48\x9f\xdc\x96\x2c\xd4\x1c\xba\x55\x5b\xfe\x27\x16\x26\x7e\x47\x4b\x86\x1f\x9c\x88\x8f\x4a\x82\x90\x5a\x94\x47\xa5\xe1\xff\x2c\x9e\x77\xc8\x96\x1f\x2f\xb1\xb7\xc3\x90\xab\x28\x1d\x5a\x7e\x69\xd8\xb3\x6f\x4f\xc6\xcb\x7f\x9f\x96\x64\xb6\x7b\x9a\x63\xed\xab\xb1\x3f\xf6\xa0\x52\x7b\x7b\xc8\x28\xc4\x1e\xb6\xc3\xee\xe1\x7b\xe1\x00\xda\x4c\xef\xbc\xcd\x05\xfa\xb4\xc6\x8b\x7b\xac\x28\x57\x8d\xaf\xb0\x9d\x65\x80\xf2\xee\x68\x6a\x30\xe9\x07\x16\x99\x4f\xee\x90\x01\xf9\x37\x00\x00\xff\xff\x06\x16\x4d\x45\x3f\x0a\x00\x00")

func installerStashAppscodeCom_stashelasticsearchesYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashelasticsearchesYaml,
		"installer.stash.appscode.com_stashelasticsearches.yaml",
	)
}

func installerStashAppscodeCom_stashelasticsearchesYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashelasticsearchesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashelasticsearches.yaml", size: 2623, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashelasticsearches.v1.yaml": installerStashAppscodeCom_stashelasticsearchesV1Yaml,
	"installer.stash.appscode.com_stashelasticsearches.yaml":    installerStashAppscodeCom_stashelasticsearchesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashelasticsearches.v1.yaml": {installerStashAppscodeCom_stashelasticsearchesV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashelasticsearches.yaml":    {installerStashAppscodeCom_stashelasticsearchesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
